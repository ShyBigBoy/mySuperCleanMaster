(1)git log
 -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新：
git log -p -2

--stat，仅显示简要的增改行数统计：
$ git log --stat 

git log file/dir 查看指定文件或文件夹修改历史记录

按指定格式显示日志信息,可选项有：oneline,short,medium,full,fuller,email,raw以及format:<string>,默认为medium
git log --pretty=oneline 用oneline 将 每个提交 放在一行显示，这在提交数很大时非常有用



(2)git show
git show commit ID（哈希值）

图形界面 gitk 
 输入commit ID（哈希值） 即可查看指定修改历史记录
 
 （3）git checkout [<commit>] [--] <paths> ...
 第1种用法（包含<paths>的用法）不会改变HEAD头指针，主要使用于指定版本的文件覆盖工作区中对应的文件。如果省略<commit>，则会用暂存区的文件覆盖工作区中的文件，否则用指定提交中的文件覆盖暂存区和工作区中的对应文件。
 
 （4）git reset [--hard|soft|mixed|merge|keep] [<commit>或HEAD]
 将暂存区和工作区的内容全部重置为某个commit的状态。之前的commit不会保留。
  
  git reset --hard
  git reset --hard HEAD [paths]
  git reset --hard HEAD~1
 

  (5)删除 一些 没有 git add 的 文件,-df 删除 文件 和 目录
  git clean -df
  
  (6)上传本地project到github
  首先在github上new一个repository。
  git clone https://github.com/ShyBigBoy/mySuperCleanMaster.git
  
  git config user.name ShyBigBoy
  git config user.email 1104449876@qq.com
  
  git status
  git add --all (git add -A或git add .)
  git status
  git commit -m "First commit"
  git push origin master #如果使用git push -u origin master，以后使用不带参数的git pull,git push即可
或
  touch README.md
  git init
  git add README.md
  git commit -m "first commit"
  git remote add origin git@github.com:guochy2012/test.git
  git push -u origin master

其他常用cmd  
  git add ...
  git commit -m "..."
  git pull origin master
  git push origin master
  
  
  
  git remote -v      #列出远程分支及详细信息url
  git branch -a
  git tag -l
  git tag -a v1.0 -m "Release version 1.0"
  git show v1.0
  git push origin --tags
  
  git branch --set-upstream dev1 origin/dev1 #关联本地分支和远程分支

  #Caching your GitHub password in Git
  #If you're cloning GitHub repositories using HTTPS, you can use a credential helper 
  #to tell Git to remember your GitHub username and password every time it talks to GitHub.
  #Turn on the credential helper so that Git will save your password in memory for some time. 
  #By default, Git will cache your password for 15 minutes.
 $git config --global credential.helper cache # Set git to use the credential memory cache
 $git config --global credential.helper 'cache --timeout=3600' #Set the cache to timeout after 1 hour (in seconds)

  $ git config --global -l
user.name=zhicheng.huang
user.email=zhicheng.huang@tcl.com
color.ui=auto
color.status=true
color.interactive=true
color.branch=true
color.diff=true
merge.tool=vimdiff
mergetool.prompt=false
credential.helper=cache --timeout=72000

  (7)修改代码实验测试，new一个新的测试分支
  $git branch test1
  $git checkout test1
  
  (8)Your local changes to the following files would be overwritten by merge
error: Your local changes to the following files would be overwritten by merge:

.......

Please, commit your changes or stash them before you can merge.

---->如果希望保留生产服务器上所做的改动,仅仅并入新配置项, 处理方法如下:


git stash
git pull
git stash pop
然后可以使用git diff  +文件名 来确认代码自动合并的情况.

git stash list
git stash pop stash@{id}

git add .
git diff --cached
  
(9)提交代码到NB site 代码仓库
--->patch_delivery_cli_x.php

Permission denied (publickey).
fatal: The remote end hung up unexpectedly
FAIL TO PUSH IN [.]

提示没有permission，登陆下面的NB site  Gerrit Code Review网站，http://172.16.11.162:8081，
把你的 .ssh/id_rsa.pub中ssh key加进去就可以了。

remote: ERROR: missing Change-Id in commit message footer
remote: Suggestion for commit message:
remote: ###%%%comment:Mod ro.build.characteristics=tablet
remote: ###%%%bug number:1142060
remote: ###%%%product name:l8909_pixi384g_orange_dint
remote: ###%%%root cause:Coding
remote: ###%%%Bug category:TCT
remote: ###%%%Generated by:SW Code
remote: ###%%%project name:PIXI384G-ORANGE
remote: ###%%%Module_Impact:
remote: ###%%%PERSO-RE-GENERATION:No
remote: ###%%%Solution:
remote: ###%%%CAN-VAL-VERIFICATION:Yes
remote: ###%%%Test_Suggestion:adb shell getprop ro.build.characteristics
remote: ###%%%Test_Report:
remote:
remote: Change-Id: I0ee10f330e37be8a085104186b2e2257ba5e4d81
remote:
remote: Hint: To automatically insert Change-Id, install the hook:
remote:   gitdir=$(git rev-parse --git-dir); scp -p -P 29418 zhicheng.huang@172.16.11.162:hooks/commit-msg ${gitdir}/hooks/
remote:
remote:
To ssh://zhicheng.huang@172.16.11.162:29418/msm8909/device/tct/pixi384g
 ! [remote rejected] HEAD -> refs/for/l8909_pixi384g_orange_dint (missing Change-Id in commit message footer)
error: failed to push some refs to 'ssh://zhicheng.huang@172.16.11.162:29418/msm8909/device/tct/pixi384g'
FAIL TO PUSH IN [.]

在commet的前面加个空格，把Change-Id加入到commet中,然后git push

--->git commit --amend -m "Ie72f49661ba273900c9a415ba1cb06917babb8cd Mod ro.build.characteristics=tablet"
--->git push ssh://zhicheng.huang@172.16.11.162:29418/msm8909/device/tct/pixi384g   HEAD:refs/for/l8909_pixi384g_orange_dint

(10)git grep -in model  //git grep比grep效率高，能让你不用签出(checkout)历史文件, 就能查找它们

(11)单独下载一个库。
git  clone git@10.128.161.91:MSM8937_tablet/kernel/msm-3.10.git -b MSM8937-M32-POP4104G-GL-DINT

  查询git库完整路径:在任意一个已下载项目中，
  cd .repo/manifests
  vim MSM8937-M32-POP4104G-GL-DINT.xml
    ... ...
    <remote fetch="git@10.128.161.91:" name="origin" review="http://10.128.161.209:8080"/>
    ... ...
    <project name="MSM8937_tablet/platform/frameworks/base" path="frameworks/base" revision="MSM8937-M32-POP4104G-GL-DINT" />
  
  git clone ["remote fetch" + "project name" + .git] -b branchname
  即git clone git@10.128.161.91:MSM8937_tablet/platform/frameworks/base.git -b MSM8937-M32-POP4104G-GL-DINT
  
  (12)git log --graph --decorate
  尽量少用git reset命令，尽量多用git revert，因为git reset可能会回退到其他分支
